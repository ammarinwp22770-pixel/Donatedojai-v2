import dotenv from "dotenv";
dotenv.config();

import admin from "firebase-admin";

const serviceAccount = {
  type: process.env.TYPE,
  project_id: process.env.PROJECT_ID,
  private_key_id: process.env.PRIVATE_KEY_ID,
private_key: process.env.PRIVATE_KEY.replace(/\\n/g, '\n'),
  client_email: process.env.CLIENT_EMAIL,
  client_id: process.env.CLIENT_ID,
  auth_uri: process.env.AUTH_URI,
  token_uri: process.env.TOKEN_URI,
  auth_provider_x509_cert_url: process.env.AUTH_PROVIDER_X509_CERT_URL,
  client_x509_cert_url: process.env.CLIENT_X509_CERT_URL,
  universe_domain: process.env.UNIVERSE_DOMAIN
};


import express from "express";
import { WebSocketServer } from "ws";
import bodyParser from "body-parser";
import fs from "fs";
import QRCode from "qrcode";
import generatePayload from "promptpay-qr";
import multer from "multer";
import http from "http";
import path from "path"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!


admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

// üìÅ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ popup
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, "public/uploads/"),
  filename: (req, file, cb) => cb(null, Date.now() + "-" + file.originalname)
});
const upload = multer({ storage });

// ‚úÖ route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ popup
app.post("/upload-popup", upload.single("popupImage"), (req, res) => {
  if (!req.file) return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå" });
  const imagePath = "/uploads/" + req.file.filename;
  console.log("üñºÔ∏è ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û popup ‡πÅ‡∏•‡πâ‡∏ß:", imagePath);
  res.json({ path: imagePath });
});

// üåê ‡∏£‡∏ß‡∏° Express + WebSocket ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
const server = http.createServer(app);
const wss = new WebSocketServer({ server, path: "/ws" });

// ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ client ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (OBS)
wss.on("connection", () => console.log("üü¢ WebSocket ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß!"));

// ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö Queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Alert (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ alert ‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô)
let alertQueue = [];
let isBroadcasting = false;

function broadcastNext() {
  if (alertQueue.length === 0) {
    isBroadcasting = false;
    return;
  }
  isBroadcasting = true;
  const data = alertQueue.shift();

  wss.clients.forEach(c => {
    if (c.readyState === 1) c.send(JSON.stringify(data));
  });

  setTimeout(broadcastNext, 6000); // ‡∏´‡∏ô‡πà‡∏ß‡∏á 6 ‡∏ß‡∏¥
}

function enqueueBroadcast(type, name, amount, comment) {
  alertQueue.push({ type, name, amount, comment, time: new Date().toISOString() });

  if (!isBroadcasting) broadcastNext();
}

// üß† ‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡πÄ‡∏ô‡∏ó
let pendingDonations = []; // [{ name, amount, comment, time }]
const donateFile = path.join(process.cwd(), "donates.json"); // ‚úÖ ‡πÉ‡∏ä‡πâ path ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å environment
if (!fs.existsSync(donateFile)) fs.writeFileSync(donateFile, "[]", "utf8");

// üíæ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡πÄ‡∏ô‡∏ó 

 
// üì° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏õ OBS
function sendToOBS(data) {
  let sent = 0;
  wss.clients.forEach(client => {
    if (client.readyState === 1) {
      client.send(JSON.stringify(data));
      sent++;
    }
  });
  console.log(`üì° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ OBS ${sent} ‡∏ï‡∏±‡∏ß`, data);
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
import fetch from "node-fetch";

// ‚úÖ API ‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ
app.post("/generateQR", async (req, res) => {
  const { amount, name, comment, token } = req.body;
  console.log("üß© Token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", token);
  if (!amount) return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" });

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CAPTCHA ‡∏à‡∏≤‡∏Å Cloudflare Turnstile
  try {
    const verify = await fetch("https://challenges.cloudflare.com/turnstile/v0/siteverify", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: `secret=0x4AAAAAAB6qazXLsDqjv-hftjzkBFfNbS0&response=${token}`
    });

    const data = await verify.json();
    if (!data.success) {
      console.log("‚ùå CAPTCHA verification failed");
      return res.status(400).json({ error: "Captcha verification failed" });
    }
  } catch (err) {
    console.error("‚ùå Error verifying CAPTCHA:", err);
    return res.status(500).json({ error: "Captcha verification error" });
  }

  // ‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ñ‡πâ‡∏≤ CAPTCHA ‡∏ú‡πà‡∏≤‡∏ô
  const payload = generatePayload("0815404297", { amount: parseFloat(amount) });
  QRCode.toDataURL(payload, (err, url) => {
    if (err) return res.status(500).json({ error: err.message });

    const now = Date.now();
    pendingDonations = pendingDonations.filter(p => now - p.time < 600000);
    pendingDonations.push({
      name: name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠",
      amount: parseFloat(amount),
      comment: comment || "",
      time: now
    });

    console.log(`üïì ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å ${name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠"} (${amount} ‡∏ö‡∏≤‡∏ó)`);
    res.json({ result: url });
  });
});


// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/donates", async (req, res) => {
  try {
    const snapshot = await db.collection("donations").orderBy("time", "desc").get();
    const data = snapshot.docs.map(doc => doc.data());
    res.json(data);
  } catch (err) {
    console.error("‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firestore ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", err);
    res.json([]);
  }
});

// üíæ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡πÄ‡∏ô‡∏ó (Firestore)
async function saveDonate(name, amount, comment = "") {
  const record = {
    name,
    amount,
    comment,
    time: new Date().toLocaleString("th-TH")
  };
  await db.collection("donations").add(record);
  console.log("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡πÄ‡∏ô‡∏ó (Firestore):", record);
}


// ‚úÖ ‡∏£‡∏±‡∏ö webhook ‡∏à‡∏≤‡∏Å‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ (Tasker)
app.post("/bankhook", (req, res) => {
  console.log("‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠:", req.body);
  const text = req.body.text || "";
  if (!text) return res.json({ ok: false });

  const looksLikeIncoming = /(‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô|‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô|‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô|‡∏ù‡∏≤‡∏Å|‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤|‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤)/i.test(text);
  if (!looksLikeIncoming) return res.json({ ok: true });

  const match = text.match(/([\d,]+(?:\.\d+)?)\s*‡∏ö‡∏≤‡∏ó/i);
  const amount = match ? parseFloat(match[1].replace(/,/g, "")) : 0;

  if (amount > 0) {
    const pending = pendingDonations.find(p => Math.abs(p.amount - amount) < 0.2);
    const donorName = pending ? pending.name : "‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏à‡∏≤‡∏Å‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ üì±";
    const comment = pending ? (pending.comment || "") : "";

    console.log(`üíñ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó ‡∏à‡∏≤‡∏Å ${donorName}`);
    saveDonate(donorName, amount, comment);

    enqueueBroadcast("donate", donorName, amount, comment || "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô üíñ");

    if (pending) {
      pendingDonations = pendingDonations.filter(p => p !== pending);
      sendToOBS({ type: "payment_done", name: donorName, amount });
    }
  }
  res.json({ ok: true });
});

// ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á Alert ‡πÑ‡∏õ OBS
app.get("/test", (req, res) => {
  sendToOBS({
    type: "donate",
    name: "‡πÄ‡∏ü‡∏≠",
    amount: 99,
    comment: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏™‡∏ï‡πå‡∏£‡∏∞‡∏ö‡∏ö üíñ"
  });
  console.log("üì° ‡∏™‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö alert ‡πÑ‡∏õ OBS ‡πÅ‡∏•‡πâ‡∏ß!");
  res.send("‚úÖ ‡∏™‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö Alert ‡πÅ‡∏•‡πâ‡∏ß! ‡∏î‡∏π OBS ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢");
});

// ‚úÖ Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏î Alert ‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å Dashboard
app.post("/test-alert", (req, res) => {
  const { name, amount, comment } = req.body;
  sendToOBS({
    type: "alert_repeat",
    name,
    amount,
    comment: comment || "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô üíñ",
    fromDashboard: true
  });
  console.log(`üîî ‡∏™‡πà‡∏á Alert ‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å Dashboard: ${name} - ${amount}‡∏ø`);
  res.json({ ok: true });
});

// ‚úÖ Route ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Alert ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ customize.html
app.post("/customize-test", (req, res) => {
  const { text, color, effect } = req.body;
  sendToOBS({
    type: "alert_test",
    name: "H0LLoWx üíñ",
    amount: 99,
    comment: text || "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô üíñ",
    color: color || "#69eaff",
    effect: effect || "pop"
  });
  console.log("üé® ‡∏™‡πà‡∏á alert_test ‡πÑ‡∏õ OBS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  res.json({ ok: true });
});

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î config ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
app.get("/config", (req, res) => {
  try {
    const config = fs.readFileSync("config.json", "utf8");
    res.json(JSON.parse(config));
  } catch {
    res.json({
      sound: "alert.mp3",
      popupImage: "images/default.png",
      color: "#69eaff",
      animation: "pop",
      minAmount: 10
    });
  }
});

// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config ‡πÉ‡∏´‡∏°‡πà
app.post("/save-config", (req, res) => {
  fs.writeFileSync("config.json", JSON.stringify(req.body, null, 2));
  console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß:", req.body);
  sendToOBS({ type: "config_update", config: req.body });
  res.json({ ok: true });
});

// ‚úÖ ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å
app.get("/", (req, res) => res.sendFile("index.html", { root: "public" }));
app.get("/alert", (req, res) => res.sendFile("alert.html", { root: "public" }));

// üßπ ‡∏•‡πâ‡∏≤‡∏á QR ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
setInterval(() => {
  const before = pendingDonations.length;
  const now = Date.now();
  pendingDonations = pendingDonations.filter(p => now - p.time < 600000);
  if (pendingDonations.length !== before)
    console.log(`üßπ ‡∏•‡πâ‡∏≤‡∏á QR ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á ${before - pendingDonations.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
}, 60000);

app.get("/ws", (req, res) => res.sendStatus(200));
app.get("/dashboard", (req, res) => res.sendFile("dashboard.html", { root: "public" }));
app.get("/eventlist", (req, res) => res.sendFile("eventlist.html", { root: "public" }));

// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`‚úÖ Server running on port ${PORT}`));
